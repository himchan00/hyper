import random

import numpy as np

from .half_cheetah import HalfCheetahEnv


class HalfCheetahHopEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current y speed and the target y speed. The tasks
    are generated by sampling the target speeds from the uniform
    distribution on [0, 3].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """

    def __init__(self, max_episode_steps=200):
        self.set_task(self.sample_tasks(1)[0])
        self._max_episode_steps = max_episode_steps
        self.task_dim = 1
        super(HalfCheetahHopEnv, self).__init__()

    def step(self, action):
        self.do_simulation(action, self.frame_skip)
        zposafter = self.get_body_com("torso")[2]

        # self.debug_prints()

        vertical_reward = -1.0 * abs(zposafter - self.goal_z)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = vertical_reward - ctrl_cost
        reward *= 10
        done = False
        infos = dict(vertical_reward=vertical_reward,
                     reward_ctrl=-ctrl_cost,
                     task=self.get_task())
        return observation, reward, done, infos

    def debug_prints(self):
        print("\n\nqpos[1]:", self.sim.data.qpos[1])
        print("self.get_body_com(torso)[2]:", self.get_body_com("torso")[2])
        print("qpos[:5]:", self.sim.data.qpos[:5])
        print("self.get_body_com(torso)[:5]:", self.get_body_com("torso")[:5])
        print("goal:", self.goal_z)

    def set_task(self, task):
        self.goal_z = task

    def get_task(self):
        return np.array([self.goal_z])

    def sample_tasks(self, n_tasks):
        return [random.uniform(0.3, 2.) for _ in range(n_tasks)]

    def reset_task(self, task):
        if task is None:
            task = self.sample_tasks(1)[0]
        self.set_task(task)
        # self.reset()

    @staticmethod
    def visualise_behaviour(env,
                            args,
                            policy,
                            iter_idx,
                            encoder=None,
                            image_folder=None,
                            return_pos=False,
                            **kwargs,
                            ):
        return HalfCheetahEnv.visualise_behaviour(env,
                                    args,
                                    policy,
                                    iter_idx,
                                    encoder=encoder,
                                    image_folder=image_folder,
                                    return_pos=return_pos,
                                    plot_z=True,
                                    **kwargs,
                                    )


